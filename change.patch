diff --git a/lib/features/printing/render/appointment_slip_preview_page.dart b/lib/features/printing/render/appointment_slip_preview_page.dart
index ebc8905497fd8a49b248ba59eec30771b7dd5aac..a2521a986fe2d6760cc45665754698bf14967183 100644
--- a/lib/features/printing/render/appointment_slip_preview_page.dart
+++ b/lib/features/printing/render/appointment_slip_preview_page.dart
@@ -1,37 +1,38 @@
 // ===============================================
 // lib/features/printing/render/appointment_slip_preview_page.dart
 // v3 — ใบนัด 80mm พร้อมโลโก้ (assets/images/logo_clinic.png)
 //      มี RepaintBoundary จับภาพเป็น PNG ได้
 // ===============================================
 import 'dart:ui' as ui;
 import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter/rendering.dart' show RenderRepaintBoundary; // สำหรับ toImage
 import 'package:flutter/services.dart' show rootBundle, ByteData;
 import '../utils/th_format.dart';
 import '../domain/appointment_slip_model.dart';
+import '../services/thermal_printer_service.dart';
 
 class AppointmentSlipPreviewPage extends StatefulWidget {
   final AppointmentSlipModel slip;
   const AppointmentSlipPreviewPage({super.key, required this.slip});
 
   @override
   State<AppointmentSlipPreviewPage> createState() => _AppointmentSlipPreviewPageState();
 }
 
 class _AppointmentSlipPreviewPageState extends State<AppointmentSlipPreviewPage> {
   final _boundaryKey = GlobalKey();
   ByteData? _logo;
   Uint8List? _png;
   bool _busy = false;
 
   @override
   void initState() {
     super.initState();
     _loadLogo();
   }
 
   Future<void> _loadLogo() async {
     try {
       final logo = await rootBundle.load('assets/images/logo_clinic.png');
       if (mounted) setState(() => _logo = logo);
@@ -77,53 +78,61 @@ class _AppointmentSlipPreviewPageState extends State<AppointmentSlipPreviewPage>
           ),
         ),
       ),
     );
   }
 
   Future<void> _capturePng() async {
     if (_busy) return; setState(() => _busy = true);
     try {
       await WidgetsBinding.instance.endOfFrame;
       final obj = _boundaryKey.currentContext?.findRenderObject();
       if (obj is! RenderRepaintBoundary) { throw Exception('ไม่พบ RepaintBoundary'); }
       if (obj.debugNeedsPaint) { await WidgetsBinding.instance.endOfFrame; }
       final ui.Image image = await obj.toImage(pixelRatio: 2.6);
       final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
       if (!mounted) return; setState(() => _png = byteData!.buffer.asUint8List());
       if (kDebugMode) debugPrint('Slip PNG: ${_png!.lengthInBytes} bytes');
     } catch (e) {
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('จับภาพไม่สำเร็จ: $e')));
       }
     } finally { if (mounted) setState(() => _busy = false); }
   }
 
   Future<void> _sendToPrinter() async {
-    if (kDebugMode) {
+    if (_png == null) return;
+    try {
+      await ThermalPrinterService.instance.printImage(_png!);
+      if (!mounted) return;
+      ScaffoldMessenger.of(context).showSnackBar(
+        const SnackBar(content: Text('ส่งไปยังเครื่องพิมพ์เรียบร้อย')),
+      );
+    } catch (e) {
+      if (!mounted) return;
       ScaffoldMessenger.of(context).showSnackBar(
-        SnackBar(content: Text('สาธิต: ส่งภาพใบนัด (${_png?.lengthInBytes ?? 0} bytes) ไปเครื่องพิมพ์')),
+        SnackBar(content: Text('พิมพ์ล้มเหลว: $e')),
       );
     }
   }
 }
 
 class _SlipWidget extends StatelessWidget {
   final double width; // ≈ 576px สำหรับ 80mm
   final AppointmentSlipModel slip;
   final ByteData? logoBytes;
   const _SlipWidget({required this.width, required this.slip, this.logoBytes});
 
   @override
   Widget build(BuildContext context) {
     final divider = Container(height: 1, color: Colors.black);
     return Container(
       width: width,
       color: Colors.white,
       padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
       child: DefaultTextStyle(
         style: const TextStyle(fontSize: 24, color: Colors.black, height: 1.25),
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.start,
           children: [
             if (logoBytes != null) ...[
               Center(
diff --git a/lib/features/printing/render/receipt_renderer_mydent.dart b/lib/features/printing/render/receipt_renderer_mydent.dart
index 72f38cb6b182e5564a36792a316c01d4a7bab694..79cbf99d75124febb24e644a8506741778b0f718 100644
--- a/lib/features/printing/render/receipt_renderer_mydent.dart
+++ b/lib/features/printing/render/receipt_renderer_mydent.dart
@@ -1,36 +1,37 @@
 // Receipt preview page for 80mm printer (DEV: force _sampleData)
 
 import 'dart:typed_data';
 import 'dart:ui' as ui;
 
 import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter/rendering.dart' show RenderRepaintBoundary;
 import 'package:flutter/services.dart' show rootBundle, ByteData;
 
 import '../utils/th_format.dart';
+import '../services/thermal_printer_service.dart';
 
 class ReceiptPreviewPage extends StatefulWidget {
   final dynamic receipt;
   final bool showNextAppt;
   final dynamic nextAppt;
   final bool useSampleData; // DEV toggle to always use _sampleData
 
   const ReceiptPreviewPage({
     super.key,
     this.receipt,
     this.showNextAppt = false,
     this.nextAppt,
     this.useSampleData = kDebugMode,
   });
 
   @override
   State<ReceiptPreviewPage> createState() => _ReceiptPreviewPageState();
 }
 
 class _ReceiptPreviewPageState extends State<ReceiptPreviewPage> {
   final _boundaryKey = GlobalKey();
   ReceiptRenderData? _data;
   ByteData? _logo;
   Uint8List? _lastPng;
   bool _busyCapture = false;
@@ -116,53 +117,61 @@ class _ReceiptPreviewPageState extends State<ReceiptPreviewPage> {
           child: Row(
             children: [
               Expanded(
                 child: ElevatedButton.icon(
                   onPressed: _busyCapture || _data == null ? null : _capturePng,
                   icon: const Icon(Icons.image),
                   label: const Text('บันทึกเป็นภาพ'),
                 ),
               ),
               const SizedBox(width: 12),
               Expanded(
                 child: ElevatedButton.icon(
                   onPressed: (_lastPng == null || _busyCapture) ? null : _sendToPrinter,
                   icon: const Icon(Icons.print),
                   label: const Text('พิมพ์'),
                 ),
               ),
             ],
           ),
         ),
       ),
     );
   }
 
   Future<void> _sendToPrinter() async {
-    if (kDebugMode) {
+    if (_lastPng == null) return;
+    try {
+      await ThermalPrinterService.instance.printImage(_lastPng!);
+      if (!mounted) return;
+      ScaffoldMessenger.of(context).showSnackBar(
+        const SnackBar(content: Text('ส่งไปยังเครื่องพิมพ์เรียบร้อย')),
+      );
+    } catch (e) {
+      if (!mounted) return;
       ScaffoldMessenger.of(context).showSnackBar(
-        SnackBar(content: Text('สาธิต: ส่งภาพ (${_lastPng?.lengthInBytes ?? 0} bytes) ไปที่เครื่องพิมพ์')),
+        SnackBar(content: Text('พิมพ์ล้มเหลว: $e')),
       );
     }
   }
 
   ReceiptRenderData _mapToRenderData(dynamic r, {required bool showNextAppt, dynamic nextAppt}) {
     final clinicName = _getS(r, ['clinicName', 'clinic_name']) ?? 'คลินิกทันตกรรมหมอกุสุมาภรณ์';
     final clinicAddr = _getS(r, ['clinicAddress', 'clinic_address', 'address']);
     final clinicTel  = _getS(r, ['clinicPhone', 'clinicTel', 'phone', 'tel']);
     final billNo     = _getS(r, ['billNo', 'receiptNo', 'bill_no', 'receipt_no']) ?? '00-001';
     final issuedAt   = _getDt(r, ['issuedAt', 'createdAt']) ?? DateTime.now();
     final patient    = _getS(r, ['patientName', 'patient.name', 'name']) ?? '-';
 
     final items = _getItems(r);
     num subtotal = _getN(r, ['subTotal','subtotal']) ?? items.fold<num>(0, (s, it) => s + it.lineTotal);
     final discount = _getN(r, ['discount']) ?? 0;
     num total = _getN(r, ['grandTotal','total']) ?? (subtotal - discount);
     if (total < 0) total = 0;
 
     final paid = _getN(r, ['paid']) ?? total;
     final change = _getN(r, ['change']) ?? 0;
 
     NextAppointmentBlock? next;
     if (showNextAppt && nextAppt != null) {
       final dt = _getDt(nextAppt, ['startAt','start','dateTime','time']);
       final note = _getS(nextAppt, ['note','notes','remark']);
diff --git a/lib/features/printing/services/thermal_printer_service.dart b/lib/features/printing/services/thermal_printer_service.dart
new file mode 100644
index 0000000000000000000000000000000000000000..6b870db94e520ea30acec5d4fed0f7c84f77653b
--- /dev/null
+++ b/lib/features/printing/services/thermal_printer_service.dart
@@ -0,0 +1,40 @@
+import 'dart:typed_data';
+
+import 'package:blue_thermal_printer/blue_thermal_printer.dart';
+
+/// Simple wrapper around [BlueThermalPrinter] to handle connection and
+/// printing images to a thermal printer via Bluetooth.
+class ThermalPrinterService {
+  ThermalPrinterService._();
+  static final ThermalPrinterService instance = ThermalPrinterService._();
+
+  final BlueThermalPrinter _bluetooth = BlueThermalPrinter.instance;
+  bool _connected = false;
+
+  /// Connects to the first bonded device if not already connected.
+  Future<void> _ensureConnected() async {
+    if (_connected) return;
+    final devices = await _bluetooth.getBondedDevices();
+    if (devices.isEmpty) {
+      throw Exception('ไม่พบเครื่องพิมพ์ที่จับคู่ไว้');
+    }
+    // Connect to the first paired device.
+    await _bluetooth.connect(devices.first);
+    _connected = true;
+  }
+
+  /// Sends raw image bytes to the printer.
+  Future<void> printImage(Uint8List bytes) async {
+    await _ensureConnected();
+    await _bluetooth.printImageBytes(bytes);
+    await _bluetooth.paperCut();
+  }
+
+  /// Disconnect from the printer if connected.
+  Future<void> disconnect() async {
+    if (_connected) {
+      await _bluetooth.disconnect();
+      _connected = false;
+    }
+  }
+}
diff --git a/pubspec.yaml b/pubspec.yaml
index eaf7e27364ede41dbaa5ac66c9ddbd9b9c305e41..6e93d88955485a29135a3b287567b828fdd3b67f 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -21,50 +21,51 @@ version: 1.0.0+1
 environment:
   sdk: ^3.7.2
 
 # Dependencies specify other packages that your package needs in order to work.
 # To automatically upgrade your package dependencies to the latest versions
 # consider running `flutter pub upgrade --major-versions`. Alternatively,
 # dependencies can be manually updated by changing the version numbers below to
 # the latest version available on pub.dev. To see which dependencies have newer
 # versions available, run `flutter pub outdated`.
 dependencies:
   flutter_localizations:
     sdk: flutter
   firebase_core: ^2.31.0
   firebase_auth: ^4.17.4
   cloud_firestore: ^4.17.5
   intl: ^0.19.0 
   table_calendar: ^3.0.9
   shared_preferences: ^2.2.2
   url_launcher: ^6.2.5
   image_picker: ^1.1.1 
   firebase_storage: ^11.7.0
   uuid: ^4.3.3
   permission_handler: ^11.2.0
   provider: ^6.0.5
   cached_network_image: ^3.3.1
+  blue_thermal_printer: ^1.2.0
 
   # The following adds the Cupertino Icons font to your application.
   # Use with the CupertinoIcons class for iOS style icons.f
   cupertino_icons: ^1.0.8
   image: ^4.5.4
 
 dev_dependencies:
   flutter_test:
     sdk: flutter
 
   # The "flutter_lints" package below contains a set of recommended lints to
   # encourage good coding practices. The lint set provided by the package is
   # activated in the `analysis_options.yaml` file located at the root of your
   # package. See that file for information about deactivating specific lint
   # rules and activating additional ones.
   flutter_lints: ^5.0.0
 
 # For information on the generic Dart part of this file, see the
 # following page: https://dart.dev/tools/pub/pubspec
 
 # The following section is specific to Flutter packages.
 flutter:
 
   # The following line ensures that the Material Icons font is
   # included with your application, so that you can use the icons in
