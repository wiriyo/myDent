diff --git a/lib/screens/treatment_add.dart b/lib/screens/treatment_add.dart
index 9038bc230612b3a3616b5ecd052d101f9349a7fd..ae2136180a0c278ec1ff21fa342af89f91b52621 100644
--- a/lib/screens/treatment_add.dart
+++ b/lib/screens/treatment_add.dart
@@ -1,45 +1,49 @@
 // ================================================================
 // ÔøΩ 5. lib/screens/treatment_add.dart
 // v1.4.0 - ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ TreatmentProvider
 // ================================================================
 import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 import '../providers/treatment_provider.dart';
 import '../widgets/treatment_form.dart';
 import '../models/treatment.dart';
 
 void showTreatmentDialog(
   BuildContext context, {
   required String patientId,
   String? patientName,
   String? initialProcedure,
   DateTime? initialDate,
+  String? initialToothNumber,
+  double? initialPrice,
   Treatment? treatment,
 }) {
   showDialog(
     context: context,
     barrierDismissible: false,
     builder: (BuildContext context) {
       return ChangeNotifierProvider(
         create: (_) => TreatmentProvider(),
         child: Dialog(
           insetPadding: const EdgeInsets.all(16),
           shape: RoundedRectangleBorder(
             borderRadius: BorderRadius.circular(20),
           ),
           backgroundColor: const Color(0xFFFBEAFF),
           child: SingleChildScrollView(
             padding: const EdgeInsets.all(16.0),
             child: TreatmentForm(
               patientId: patientId,
               patientName: patientName,
               initialProcedure: initialProcedure,
               initialDate: initialDate,
+              initialToothNumber: initialToothNumber,
+              initialPrice: initialPrice,
               treatment: treatment,
             ),
           ),
         ),
       );
     },
   );
 }
\ No newline at end of file
diff --git a/lib/services/treatment_master_service.dart b/lib/services/treatment_master_service.dart
index 376e2bc2cb53fa392322fbfcaacdee4905ae84e4..3f0e5f803422ae1b228f5d821034f27277565b24 100644
--- a/lib/services/treatment_master_service.dart
+++ b/lib/services/treatment_master_service.dart
@@ -12,48 +12,57 @@ class TreatmentMasterService {
 
   static Stream<List<TreatmentMaster>> getAllTreatments() {
     return _collection
         .orderBy('name')
         .snapshots()
         .map(
           (snapshot) =>
               snapshot.docs
                   .map((doc) => TreatmentMaster.fromMap(doc.data(), doc.id))
                   .toList(),
         );
   }
 
   static Future<void> addTreatment(TreatmentMaster treatment) async {
     await _collection.add(treatment.toMap());
   }
 
   static Future<void> updateTreatment(TreatmentMaster treatment) async {
     await _collection.doc(treatment.treatmentId).update(treatment.toMap());
   }
 
   static Future<void> deleteTreatment(String treatmentId) async {
     await _collection.doc(treatmentId).delete();
   }
 
+  // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
+  static Future<TreatmentMaster?> getTreatmentByName(String name) async {
+    final snapshot =
+        await _collection.where('name', isEqualTo: name).limit(1).get();
+    if (snapshot.docs.isEmpty) return null;
+    final doc = snapshot.docs.first;
+    return TreatmentMaster.fromMap(doc.data(), doc.id);
+  }
+
   // üßµ‚ú® [CHANGED v1.1] ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á Master ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
   // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
   static Future<String> addIfNotExist(String name, double price) async {
     final snapshot =
         await _collection.where('name', isEqualTo: name).limit(1).get();
 
     if (snapshot.docs.isEmpty) {
       // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
       final docRef = await _collection.add({
         'name': name,
         'price': price,
         'duration': 30, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
       });
       print('üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ treatment_master: $name ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ ID: ${docRef.id}');
       return docRef.id; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
     } else {
       // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
       final docId = snapshot.docs.first.id;
       print('‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô master ‡∏î‡πâ‡∏ß‡∏¢ ID: $docId');
       return docId; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
     }
   }
 }
\ No newline at end of file
diff --git a/lib/widgets/appointment_detail_dialog.dart b/lib/widgets/appointment_detail_dialog.dart
index 97b0d7b66751b22b7ae78dd62d41f5e7941d927d..ba18606654e8c1728a5a84c963316f4ab5a9e01c 100644
--- a/lib/widgets/appointment_detail_dialog.dart
+++ b/lib/widgets/appointment_detail_dialog.dart
@@ -1,34 +1,35 @@
 // üíñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞‡∏û‡∏µ‡πà‡∏ó‡∏∞‡πÄ‡∏•! ‡πÑ‡∏•‡∏•‡∏≤‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á Dropdown ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä
 
 import 'package:flutter/material.dart';
 import 'package:intl/intl.dart';
 import 'package:url_launcher/url_launcher.dart';
 import '../models/patient.dart';
 import '../services/appointment_service.dart';
 import '../services/patient_service.dart';
 import '../services/rating_service.dart';
+import '../services/treatment_master_service.dart';
 import '../screens/appointment_add.dart';
 import '../screens/treatment_add.dart';
 import '../models/appointment_model.dart';
 import '../styles/app_theme.dart';
 
 class AppointmentDetailDialog extends StatefulWidget {
   final AppointmentModel appointment;
   final Patient patient;
   final VoidCallback onDataChanged;
 
   const AppointmentDetailDialog({
     super.key,
     required this.appointment,
     required this.patient,
     required this.onDataChanged,
   });
 
   @override
   State<AppointmentDetailDialog> createState() =>
       _AppointmentDetailDialogState();
 }
 
 class _AppointmentDetailDialogState extends State<AppointmentDetailDialog> {
   final AppointmentService _appointmentService = AppointmentService();
   final PatientService _patientService = PatientService();
@@ -146,60 +147,69 @@ class _AppointmentDetailDialogState extends State<AppointmentDetailDialog> {
     try {
       final updatedAppointment = AppointmentModel(
         appointmentId: widget.appointment.appointmentId,
         userId: widget.appointment.userId,
         patientId: widget.appointment.patientId,
         patientName: widget.appointment.patientName,
         treatment: widget.appointment.treatment,
         duration: widget.appointment.duration,
         startTime: widget.appointment.startTime,
         endTime: widget.appointment.endTime,
         teeth: widget.appointment.teeth,
         status: _currentStatus,
         notes: _reasonController.text.trim().isEmpty ? null : _reasonController.text.trim(),
       );
       await _appointmentService.updateAppointment(updatedAppointment);
 
       final currentRating = widget.patient.rating;
       final newRating = RatingService.calculateNewRating(
         currentRating: currentRating,
         appointmentStatus: _currentStatus,
       );
 
       if (newRating != currentRating) {
         await _patientService.updatePatientRating(widget.patient.patientId, newRating);
       }
+      double? initialPrice;
+      if (_currentStatus == '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') {
+        final master =
+            await TreatmentMasterService.getTreatmentByName(widget.appointment.treatment);
+        initialPrice = master?.price;
+      }
 
       if (mounted) {
         Navigator.pop(context);
         if (_currentStatus == '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') {
           showTreatmentDialog(
             context,
             patientId: widget.patient.patientId,
             patientName: widget.patient.name,
             initialProcedure: widget.appointment.treatment,
             initialDate: widget.appointment.startTime,
+            initialToothNumber:
+                widget.appointment.teeth?.join(', '),
+            initialPrice: initialPrice,
           );
         }
         ScaffoldMessenger.of(context).showSnackBar(
           const SnackBar(
             content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
             duration: Duration(seconds: 2),
           ),
         );
         widget.onDataChanged();
       }
     } catch (e) {
       if (mounted) {
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: $e')),
         );
       }
     }
   }
 
   int _calculateAge(DateTime? birthDate) {
     if (birthDate == null) return 0;
     final today = DateTime.now();
     int age = today.year - birthDate.year;
     if (today.month < birthDate.month ||
         (today.month == birthDate.month && today.day < birthDate.day)) {
diff --git a/lib/widgets/treatment_form.dart b/lib/widgets/treatment_form.dart
index b42703a1e857f862743dde9c3132fd7d2ad661b7..0302da93367ec9b2869b44c3f8959a4d99f3d2c2 100644
--- a/lib/widgets/treatment_form.dart
+++ b/lib/widgets/treatment_form.dart
@@ -1,85 +1,93 @@
 // v1.5.1 - üé® ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
 // v1.5.0 - üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (Treatment Notes)
 import 'dart:io';
 import 'package:flutter/material.dart';
 import 'package:image_picker/image_picker.dart';
 import 'package:provider/provider.dart';
 import '../providers/treatment_provider.dart';
 import '../models/treatment_master.dart';
 import '../models/treatment.dart';
 import '../services/treatment_master_service.dart';
 import '../styles/app_theme.dart';
 
 class TreatmentForm extends StatefulWidget {
   final String patientId;
   final Treatment? treatment;
   final String? patientName;
   final String? initialProcedure;
   final DateTime? initialDate;
+  final String? initialToothNumber;
+  final double? initialPrice;
 
   const TreatmentForm({
     super.key,
     required this.patientId,
     this.treatment,
     this.patientName,
     this.initialProcedure,
     this.initialDate,
+    this.initialToothNumber,
+    this.initialPrice,
   });
 
   @override
   State<TreatmentForm> createState() => _TreatmentFormState();
 }
 
 class _TreatmentFormState extends State<TreatmentForm> {
   final _formKey = GlobalKey<FormState>();
   final TextEditingController _procedureController = TextEditingController();
   final TextEditingController _toothNumberController = TextEditingController();
   final TextEditingController _priceController = TextEditingController();
   final TextEditingController _notesController = TextEditingController();
   DateTime? _selectedDate;
   String? _selectedTreatmentMasterId;
 
   final List<File> _newImages = [];
   List<String> _existingImageUrls = [];
   bool get _isEditing => widget.treatment != null;
 
   @override
   void initState() {
     super.initState();
     if (_isEditing) {
       final t = widget.treatment!;
       _selectedTreatmentMasterId = t.treatmentMasterId;
       _procedureController.text = t.procedure;
       _toothNumberController.text = t.toothNumber;
       _priceController.text = t.price.toStringAsFixed(0);
       _selectedDate = t.date;
       _existingImageUrls = List.from(t.imageUrls);
       _notesController.text = t.notes ?? '';
     } else {
       _procedureController.text = widget.initialProcedure ?? '';
       _selectedDate = widget.initialDate;
+      _toothNumberController.text = widget.initialToothNumber ?? '';
+      _priceController.text = widget.initialPrice != null
+          ? widget.initialPrice!.toStringAsFixed(0)
+          : '';
     }
   }
 
   @override
   void dispose() {
     _procedureController.dispose();
     _toothNumberController.dispose();
     _priceController.dispose();
     _notesController.dispose();
     super.dispose();
   }
 
   Future<void> _selectDate(BuildContext context) async {
     final DateTime? picked = await showDatePicker(
       context: context,
       initialDate: _selectedDate ?? DateTime.now(),
       firstDate: DateTime(2000),
       lastDate: DateTime(2101),
     );
     if (picked != null && picked != _selectedDate) {
       setState(() {
         _selectedDate = picked;
       });
     }
   }
