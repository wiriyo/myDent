// ----------------------------------------------------------------
// üìÅ lib/features/printing/render/receipt_mapper.dart (UPGRADED)
// v1.1.0 - üöÄ ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î mapCalendarResultToApptInfo ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
// ----------------------------------------------------------------

import '../domain/receipt_model.dart';
import '../domain/appointment_slip_model.dart';

/// ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÅ‡∏ñ‡∏ß‡∏ö‡∏¥‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ map ‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
class ReceiptLineInput {
  final String name;
  final int qty;
  final num price;
  const ReceiptLineInput({required this.name, required this.qty, required this.price});
}

/// ‡∏™‡∏£‡πâ‡∏≤‡∏á ReceiptModel ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏î‡∏¥‡∏ö (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô MyDent)
ReceiptModel buildReceiptModel({
  // Clinic
  required String clinicName,
  required String clinicAddress,
  required String clinicPhone,
  // Bill
  required String billNo,
  required DateTime issuedAt,
  // Patient
  required String patientName,
  String hn = '',
  // Items
  required List<ReceiptLineInput> items,
  // Summary (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/VAT‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÉ‡∏´‡πâ)
  num? subTotal,
  num discount = 0,
  num vat = 0,
  num? grandTotal,
}) {
  final lines = items
      .map((e) => ReceiptLine(name: e.name, qty: e.qty, price: e.price))
      .toList();
  final sub = subTotal ?? lines.fold<num>(0, (p, e) => p + e.qty * e.price);
  final grand = grandTotal ?? sub - discount + vat;

  return ReceiptModel(
    clinic: ClinicInfo(name: clinicName, address: clinicAddress, phone: clinicPhone),
    bill: BillInfo(billNo: billNo, issuedAt: issuedAt),
    patient: PatientInfo(name: patientName, hn: hn),
    lines: lines,
    totals: TotalSummary(subTotal: sub, discount: discount, vat: vat, grandTotal: grand),
  );
}

/// ‡πÉ‡∏ö‡∏ô‡∏±‡∏î (appointment slip) ‚Äî ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å MyDent ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏•‡∏¥‡∏õ
AppointmentSlipModel buildAppointmentSlip({
  required String clinicName,
  required String clinicAddress,
  required String clinicPhone,
  required String patientName,
  String hn = '',
  required DateTime startAt,
  String? note,
}) {
  return AppointmentSlipModel(
    clinic: ClinicInfo(name: clinicName, address: clinicAddress, phone: clinicPhone),
    patient: PatientInfo(name: patientName, hn: hn),
    appointment: AppointmentInfo(startAt: startAt, note: note),
  );
}

/// ‚ú® [UPGRADED v1.1.0] ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (AppointmentModel) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô AppointmentInfo
/// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£ + ‡∏ã‡∏µ‡πà‡∏ü‡∏±‡∏ô + ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
AppointmentInfo mapCalendarResultToApptInfo(dynamic result) {
  if (result == null) {
    throw ArgumentError('calendarResult is null');
  }

  DateTime startAt;
  String treatment;
  List<String> teeth;
  String? notes;

  // ‡πÉ‡∏ä‡πâ dynamic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ import AppointmentModel ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ mapper ‡∏ô‡∏µ‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ú‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö model layer ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  final r = result as dynamic;
  startAt = r.startTime as DateTime;
  treatment = r.treatment as String? ?? '';
  // ‡πÅ‡∏õ‡∏•‡∏á List<dynamic> ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô List<String> ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  teeth = (r.teeth as List<dynamic>?)?.map((e) => e.toString()).toList() ?? [];
  notes = r.notes as String?;
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÉ‡∏ö‡∏ô‡∏±‡∏î
  final teethString = teeth.isNotEmpty ? ' (#${teeth.join(', ')})' : '';
  String fullNote = '$treatment$teethString';

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡πá‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
  if (notes != null && notes.trim().isNotEmpty) {
    fullNote += '\n${notes.trim()}';
  }

  return AppointmentInfo(startAt: startAt, note: fullNote.trim());
}
