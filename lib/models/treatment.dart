// v1.3.0 - üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (Treatment Notes)
// v1.2.1 - üêû ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ Analyzer ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
import 'package:cloud_firestore/cloud_firestore.dart';

// --- üìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ (Treatment Model) ---
class Treatment {
  final String id;
  final String patientId;
  final String treatmentMasterId;
  final String procedure;
  final String toothNumber;
  final double price;
  final DateTime date;
  final List<String> imageUrls;
  
  // üìù [NEW v1.3.0] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö "‡∏™‡∏°‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"
  // ‡πÄ‡∏õ‡πá‡∏ô String? (nullable) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ field ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞
  final String? notes;

  Treatment({
    required this.id,
    required this.patientId,
    required this.treatmentMasterId,
    required this.procedure,
    required this.toothNumber,
    required this.price,
    required this.date,
    this.imageUrls = const [],
    this.notes, // üìù [NEW v1.3.0] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô constructor
  });

  // --- ‚öôÔ∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---

  /// ‡πÅ‡∏õ‡∏•‡∏á Object Treatment ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Map
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'patientId': patientId,
      'treatmentMasterId': treatmentMasterId,
      'procedure': procedure,
      'toothNumber': toothNumber,
      'price': price,
      'date': Timestamp.fromDate(date),
      'imageUrls': imageUrls,
      'notes': notes, // üìù [NEW v1.3.0] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Map
    };
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Object Treatment ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Firestore
  factory Treatment.fromMap(Map<String, dynamic> map, String id) {
    var imageUrlsData = map['imageUrls'];
    List<String> imageUrlsList = [];
    if (imageUrlsData is List) {
      for (var item in imageUrlsData) {
        if (item is String) {
          imageUrlsList.add(item);
        }
      }
    }

    return Treatment(
      id: id,
      patientId: map['patientId'] ?? '',
      treatmentMasterId: map['treatmentMasterId'] ?? '',
      procedure: map['procedure'] ?? '',
      toothNumber: map['toothNumber'] ?? '',
      price: (map['price'] as num?)?.toDouble() ?? 0.0,
      date: (map['date'] as Timestamp?)?.toDate() ?? DateTime.now(),
      imageUrls: imageUrlsList,
      notes: map['notes'], // üìù [NEW v1.3.0] ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ notes ‡∏à‡∏≤‡∏Å Firestore
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á Treatment object ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≤‡∏á field ‡πÑ‡∏î‡πâ
  Treatment copyWith({
    String? id,
    String? patientId,
    String? treatmentMasterId,
    String? procedure,
    String? toothNumber,
    double? price,
    DateTime? date,
    List<String>? imageUrls,
    String? notes, // üìù [NEW v1.3.0] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô copyWith
  }) {
    return Treatment(
      id: id ?? this.id,
      patientId: patientId ?? this.patientId,
      treatmentMasterId: treatmentMasterId ?? this.treatmentMasterId,
      procedure: procedure ?? this.procedure,
      toothNumber: toothNumber ?? this.toothNumber,
      price: price ?? this.price,
      date: date ?? this.date,
      imageUrls: imageUrls ?? this.imageUrls,
      notes: notes ?? this.notes, // üìù [NEW v1.3.0]
    );
  }
}
