// ----------------------------------------------------------------
// üìÅ lib/providers/patient_provider.dart (‚ÄºÔ∏è NEW FILE)
// v1.2.0 - ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ä‡∏ü‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
// ----------------------------------------------------------------
import 'package:flutter/material.dart';
import '../models/patient.dart';
import '../services/patient_service.dart';
import '../services/prefix_service.dart';

class PatientProvider with ChangeNotifier {
  final PatientService _patientService = PatientService();
  bool _isLoading = false;
  String? _error;

  bool get isLoading => _isLoading;
  String? get error => _error;

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String? error) {
    _error = error;
  }

  // üç≥ ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏ü: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ"
  Future<bool> savePatient(Patient patient, bool isEditing) async {
    _setLoading(true);
    _setError(null);

    try {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Prefix ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      await PrefixService.addIfNotExist(patient.prefix);

      // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
      if (isEditing) {
        await _patientService.updatePatient(patient);
      } else {
        await _patientService.addPatient(patient);
      }
      
      _setLoading(false);
      return true; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
    } catch (e) {
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      _setLoading(false);
      return false; // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  }

  // üç≥ ‡∏≠‡∏µ‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏ü: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ"
  Future<bool> deletePatient(String patientId) async {
    _setLoading(true);
    _setError(null);

    try {
      await _patientService.deletePatient(patientId);
      _setLoading(false);
      return true; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
    } catch (e) {
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      _setLoading(false);
      return false; // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  }
}