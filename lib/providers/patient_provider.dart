// ----------------------------------------------------------------
// üìÅ lib/providers/patient_provider.dart
// (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Logic ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà Service ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)
// ----------------------------------------------------------------
import 'package:flutter/material.dart';
import '../models/patient.dart';
import '../services/patient_service.dart';
import '../services/prefix_service.dart';

class PatientProvider with ChangeNotifier {
  final PatientService _patientService = PatientService();
  bool _isLoading = false;
  String? _error;

  bool get isLoading => _isLoading;
  String? get error => _error;

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String? error) {
    _error = error;
  }

  Future<bool> savePatient(Patient patient, bool isEditing) async {
    _setLoading(true);
    _setError(null);

    try {
      await PrefixService.addIfNotExist(patient.prefix);

      if (isEditing) {
        await _patientService.updatePatient(patient);
      } else {
        await _patientService.addPatient(patient);
      }
      
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      _setLoading(false);
      return false;
    }
  }

  Future<bool> deletePatient(String patientId) async {
    _setLoading(true);
    _setError(null);

    try {
      // ‚ú® ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞!
      await _patientService.deletePatient(patientId);
      _setLoading(false);
      return true;
    } catch (e) {
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      _setLoading(false);
      return false;
    }
  }
}
