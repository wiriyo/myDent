// v1.3.0 - üóëÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
// v1.2.0 - üñºÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
import 'dart:io';
import 'package:flutter/material.dart';
import '../models/treatment.dart';
import '../services/treatment_service.dart';
import '../services/treatment_master_service.dart';

class TreatmentProvider with ChangeNotifier {
  final TreatmentService _treatmentService = TreatmentService();

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  String? _error;
  String? get error => _error;

  void _setLoading(bool value) {
    _isLoading = value;
    notifyListeners();
  }

  void _setError(String? message) {
    _error = message;
  }

  /// ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"
  Future<bool> saveTreatment({
    required String patientId,
    required Treatment treatment,
    bool isEditing = false,
    List<File>? images,
  }) async {
    _setLoading(true);
    _setError(null);
    try {
      final masterId = await TreatmentMasterService.addIfNotExist(treatment.procedure, treatment.price);
      final treatmentToSave = treatment.copyWith(treatmentMasterId: masterId);

      if (isEditing) {
        await _treatmentService.updateTreatment(
          patientId,
          treatmentToSave,
          newImages: images,
        );
      } else {
        await _treatmentService.addTreatment(
          patientId,
          treatmentToSave,
          images: images,
        );
      }
      _setLoading(false);
      return true;
    } catch (e) {
      debugPrint('üßë‚Äçüç≥‚ùå ‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏≥‡∏û‡∏•‡∏≤‡∏î: $e');
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞: $e');
      _setLoading(false);
      return false;
    }
  }
  
  /// ‚ú® [NEW v1.3.0] ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤"
  /// ‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å UI (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó‡∏ö‡∏ô Thumbnail)
  Future<bool> deleteTreatmentImage({
    required String patientId,
    required String treatmentId,
    required String imageUrl,
  }) async {
    _setLoading(true);
    _setError(null);
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Service ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
      await _treatmentService.deleteTreatmentImage(
        patientId: patientId,
        treatmentId: treatmentId,
        imageUrl: imageUrl,
      );
      _setLoading(false);
      return true; // ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
    } catch (e) {
      debugPrint('üßë‚Äçüç≥‚ùå ‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏≥‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: $e');
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡πà‡∏∞: $e');
      _setLoading(false);
      return false; // ‡∏•‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    }
  }


  /// ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤" ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô
  Future<bool> deleteTreatment(String patientId, String treatmentId) async {
    _setLoading(true);
    _setError(null);
    try {
      await _treatmentService.deleteTreatment(patientId, treatmentId);
      _setLoading(false);
      return true;
    } catch (e) {
      debugPrint('üßë‚Äçüç≥‚ùå ‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏≥‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏•‡∏ö: $e');
      _setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞: $e');
      _setLoading(false);
      return false;
    }
  }
}
