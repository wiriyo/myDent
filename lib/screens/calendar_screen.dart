// üìÅ lib/screens/calendar_screen.dart

import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/appointment_service.dart';
import 'patients_screen.dart';
import 'appointment_add.dart';
import 'setting_screen.dart';
import 'reports_screen.dart';
import 'package:intl/intl.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:url_launcher/url_launcher.dart';
import 'daily_calendar_screen.dart'
    hide // ‚ú® ‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Widget ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å daily_calendar_screen.dart
        InkWell,
        FloatingActionButton,
        FloatingActionButtonLocation,
        BottomAppBar;

// ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° enum ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ñ‡πà‡∏∞
enum _CalendarButtonMode { displayWeekly, displayDaily, displayMonthly }

class CalendarScreen extends StatefulWidget {
  final bool showReset;
  const CalendarScreen({super.key, this.showReset = false});

  @override
  State<CalendarScreen> createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  final AppointmentService _appointmentService = AppointmentService();
  List<Map<String, dynamic>> _selectedAppointmentsWithPatients = [];
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  CalendarFormat _calendarFormat = CalendarFormat.month;
  int _selectedIndex = 0; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BottomNavigationBar

  // ‚ú® ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå" (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
  _CalendarButtonMode _buttonMode = _CalendarButtonMode.displayWeekly;

  @override
  void initState() {
    super.initState();
    _selectedDay = _focusedDay; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    _calendarFormat = CalendarFormat.month; // ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    _buttonMode = _CalendarButtonMode.displayWeekly; // ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
    _fetchAppointmentsForSelectedDay(_selectedDay!);
  }

  List<Map<String, dynamic>> buildAppointmentListWithGaps(
    List<Map<String, dynamic>> rawList,
  ) {
    List<Map<String, dynamic>> fullList = [];

    rawList.sort((a, b) {
      final startA = a['appointment']['startTime'];
      final startB = b['appointment']['startTime'];

      final aDate = startA is Timestamp ? startA.toDate() : DateTime(0);
      final bDate = startB is Timestamp ? startB.toDate() : DateTime(0);

      return aDate.compareTo(bDate);
    });

    for (int i = 0; i < rawList.length; i++) {
      fullList.add(rawList[i]);

      if (i < rawList.length - 1) {
        final endCurrent = rawList[i]['appointment']['endTime'];
        final startNext = rawList[i + 1]['appointment']['startTime'];

        final currentEnd = endCurrent is Timestamp ? endCurrent.toDate() : null;
        final nextStart = startNext is Timestamp ? startNext.toDate() : null;

        if (currentEnd != null &&
            nextStart != null &&
            currentEnd.isBefore(nextStart)) {
          fullList.add({'isGap': true, 'start': currentEnd, 'end': nextStart});
        }
      }
    }

    return fullList;
  }

  void _fetchAppointmentsForSelectedDay(DateTime selectedDay) async {
    List<Map<String, dynamic>> appointments = await _appointmentService
        .getAppointmentsByDate(selectedDay);

    List<Map<String, dynamic>> appointmentsWithPatients = [];

    for (var appointment in appointments) {
      final patientId = appointment['patientId'];
      Map<String, dynamic>? patient = await _appointmentService.getPatientById(
        patientId,
      );

      if (patient != null) {
        appointmentsWithPatients.add({
          'appointment': appointment,
          'patient': patient,
        });
      }
    }

    if (!mounted) return;
    setState(() {
      _selectedAppointmentsWithPatients = appointmentsWithPatients;
    });
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });

    if (index == 1) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const PatientsScreen()),
      );
    } else if (index == 3) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const ReportsScreen()),
      );
    } else if (index == 4) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const SettingsScreen()),
      );
    }
  }

  Widget _buildRatingStars(int rating) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.purple.shade200),
      ),
      child: Row(
        children: List.generate(5, (index) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 2.0),
            child: Image.asset(
              index < rating
                  ? 'assets/icons/tooth_good.png'
                  : 'assets/icons/tooth_broke.png',
              width: 16,
              height: 16,
            ),
          );
        }),
      ),
    );
  }

  // ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞
  Widget _buildCalendarToggleButton() {
    IconData icon;
    String label;
    VoidCallback onPressedAction;

    if (_buttonMode == _CalendarButtonMode.displayWeekly) {
      icon = Icons.view_week; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
      label = '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå';
      onPressedAction = () {
        setState(() {
          _calendarFormat = CalendarFormat.week; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
          _buttonMode = _CalendarButtonMode.displayDaily; // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"
        });
      };
    } else if (_buttonMode == _CalendarButtonMode.displayDaily) {
      icon = Icons.calendar_view_day; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"
      label = '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô';
      onPressedAction = () {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ DailyCalendarScreen ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => DailyCalendarScreen(
              selectedDate: _selectedDay ?? DateTime.now(),
            ),
          ),
        ).then((returnedFormat) {
          // ‚ú® ‡πÄ‡∏°‡∏∑‡πà‡∏≠ DailyCalendarScreen ‡∏ñ‡∏π‡∏Å pop ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
          if (mounted) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ widget ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô tree ‡πÑ‡∏´‡∏°
            setState(() {
              if (returnedFormat is CalendarFormat) {
                // ‡∏ñ‡πâ‡∏≤ DailyCalendarScreen ‡∏™‡πà‡∏á CalendarFormat ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏•‡∏±‡∏ö‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô)
                _calendarFormat = returnedFormat; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï format ‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å
                if (returnedFormat == CalendarFormat.month) {
                  _buttonMode = _CalendarButtonMode.displayWeekly; // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠ "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
                } else { // returnedFormat == CalendarFormat.week
                  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô week ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô week ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                  // ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏õ DailyScreen ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
                  // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå" ‡∏à‡∏≤‡∏Å DailyScreen ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                  // ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πá‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô week ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"
                  _buttonMode = _CalendarButtonMode.displayDaily;
                }
              } else {
                // ‡∏ñ‡πâ‡∏≤ DailyCalendarScreen pop ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏î back ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
                // ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏Å‡∏î "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡∏à‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ
                _buttonMode = _CalendarButtonMode.displayWeekly;
              }
            });
          }
        });
      };
    } else { // _buttonMode == _CalendarButtonMode.displayMonthly
      icon = Icons.calendar_month; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
      label = '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
      onPressedAction = () {
        setState(() {
          _calendarFormat = CalendarFormat.month; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          _buttonMode = _CalendarButtonMode.displayWeekly; // ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
        });
      };
    }

    return TextButton.icon(
      onPressed: onPressedAction,
      icon: Icon(icon, color: Colors.purple),
      label: Text(label, style: const TextStyle(color: Colors.purple, fontWeight: FontWeight.bold)),
      style: TextButton.styleFrom(
          backgroundColor: Colors.purple.shade50,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12))),
    );
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFEFE0FF),
      appBar: AppBar(
        backgroundColor: const Color(0xFFD9B8FF),
        elevation: 0,
        titleTextStyle: const TextStyle(
          color: Colors.white,
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
        title: const Text('Appointment Calendar'),
        actions:
            widget.showReset
                ? [
                  IconButton(
                    icon: Icon(Icons.developer_mode, size: 30),
                    onPressed: () async {
                      final prefs = await SharedPreferences.getInstance();
                      await prefs.remove('skipLogin');
                      if (!mounted) return;
                      Navigator.pushReplacementNamed(context, '/login');
                    },
                    tooltip: '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login',
                    color: Colors.white,
                  ),
                ]
                : null,
      ),
      body: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          children: [
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.purple.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end, // ‚ú® ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏Ñ‡πà‡∏∞
                    children: [
                      // ‚ú® ‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å
                      // ‚ú® ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏∞
                      _buildCalendarToggleButton(),
                    ],
                  ),

                  TableCalendar(
                    locale: 'th_TH',
                    firstDay: DateTime.utc(2020, 1, 1),
                    lastDay: DateTime.utc(2030, 12, 31),
                    focusedDay: _focusedDay,
                    selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
                    onDaySelected: (selectedDay, focusedDay) {
                      setState(() {
                        _selectedDay = selectedDay;
                        _focusedDay = focusedDay;
                      });
                      _fetchAppointmentsForSelectedDay(selectedDay);
                    },
                    calendarFormat: _calendarFormat,
                    onFormatChanged: (format) {
                      setState(() {
                        _calendarFormat = format;
                      });
                    },
                    calendarStyle: CalendarStyle(
                      todayDecoration: BoxDecoration(
                        color: Colors.pink.shade100,
                        shape: BoxShape.circle,
                      ),
                      selectedDecoration: BoxDecoration(
                        color: Colors.purple.shade300,
                        shape: BoxShape.circle,
                      ),
                      weekendTextStyle: TextStyle(
                        color: Colors.purple.shade200,
                      ),
                      outsideDaysVisible: false,
                    ),
                    headerStyle: const HeaderStyle(
                      formatButtonVisible: false,
                      titleCentered: true,
                      titleTextStyle: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    daysOfWeekStyle: const DaysOfWeekStyle(
                      weekendStyle: TextStyle(color: Colors.purple),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child:
                  _selectedAppointmentsWithPatients.isEmpty
                      ? const Center(child: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢'))
                      : ListView.builder(
                        itemCount:
                            buildAppointmentListWithGaps(
                              _selectedAppointmentsWithPatients,
                            ).length,
                        itemBuilder: (context, index) {
                          final item =
                              buildAppointmentListWithGaps(
                                _selectedAppointmentsWithPatients,
                              )[index];

                          if (item['isGap'] == true) {
                            final gapStart = item['start'] as DateTime;
                            final gapEnd = item['end'] as DateTime;
                            final timeFormat = DateFormat.Hm();
                            final startFormatted = timeFormat.format(gapStart);
                            final endFormatted = timeFormat.format(gapEnd);

                            return InkWell(
                              onTap: () {
                                showDialog(
                                  context: context,
                                  builder:
                                      (_) => AppointmentAddDialog(
                                        initialDate: _selectedDay,
                                        initialStartTime: gapStart,
                                      ),
                                ).then((_) {
                                  if (_selectedDay != null) {
                                    _fetchAppointmentsForSelectedDay(
                                      _selectedDay!,
                                    );
                                  }
                                });
                              },
                              child: Card(
                                color: Colors.grey.shade100,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(16),
                                ),
                                margin: const EdgeInsets.symmetric(
                                  vertical: 8.0,
                                  horizontal: 4.0,
                                ),
                                child: Padding(
                                  padding: const EdgeInsets.all(16.0),
                                  child: Row(
                                    children: [
                                      Icon(
                                        Icons.hourglass_empty,
                                        color: Colors.grey.shade600,
                                      ),
                                      const SizedBox(width: 12),
                                      Expanded(
                                        child: Text(
                                          '‡∏ß‡πà‡∏≤‡∏á: $startFormatted - $endFormatted',
                                          style: TextStyle(
                                            color: Colors.grey.shade700,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          }

                          final appointment = item['appointment'];
                          final patient = item['patient'];
                          final dynamic startRaw = appointment['startTime'];
                          final dynamic endRaw = appointment['endTime'];

                          DateTime? startTime;
                          DateTime? endTime;

                          if (startRaw is Timestamp) {
                            startTime = startRaw.toDate();
                          } else if (startRaw is String) {
                            startTime = DateTime.tryParse(startRaw);
                          }

                          if (endRaw is Timestamp) {
                            endTime = endRaw.toDate();
                          } else if (endRaw is String) {
                            endTime = DateTime.tryParse(endRaw);
                          }

                          final timeFormat = DateFormat.Hm();
                          final startFormatted =
                              startTime != null
                                  ? timeFormat.format(startTime)
                                  : '-';
                          final endFormatted =
                              endTime != null
                                  ? timeFormat.format(endTime)
                                  : '-';
                          final showTime =
                              endFormatted != '-'
                                  ? '‡πÄ‡∏ß‡∏•‡∏≤: $startFormatted - $endFormatted'
                                  : '‡πÄ‡∏ß‡∏•‡∏≤: $startFormatted';
                          final int rating =
                              patient['rating'] is int ? patient['rating'] : 0;

                          return InkWell(
                            onTap: () {
                              showDialog(
                                context: context,
                                builder:
                                    (_) => AppointmentAddDialog(
                                      appointmentData: appointment,
                                    ),
                              ).then((_) {
                                if (_selectedDay != null) {
                                  _fetchAppointmentsForSelectedDay(
                                    _selectedDay!,
                                  );
                                }
                              });
                            },
                            child: Card(
                              color: () {
                                final status = appointment['status'] ?? '';
                                if (status == '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß') {
                                  return const Color(0xFFE0F7E9);
                                } else if (status == '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô' ||
                                    status == '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ') {
                                  return const Color(0xFFFFF8E1);
                                } else if (status == '‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î' ||
                                    status == '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ô‡∏±‡∏î') {
                                  return const Color(0xFFFFEBEE);
                                } else {
                                  return Colors.pink.shade50;
                                }
                              }(),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(16),
                              ),
                              margin: const EdgeInsets.symmetric(
                                vertical: 8.0,
                                horizontal: 4.0,
                              ),
                              child: Stack(
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.all(16.0),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceBetween,
                                          children: [
                                            Text(
                                              '‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ: ${patient['name'] ?? '-'}',
                                              style: const TextStyle(
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                            if (rating > 0)
                                              _buildRatingStars(rating),
                                          ],
                                        ),
                                        const SizedBox(height: 4),
                                        Text(showTime),
                                        Text(
                                          '‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£: ${appointment['treatment'] ?? '-'}',
                                        ),
                                        Text(
                                          '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${appointment['status'] ?? '-'}',
                                        ),
                                        if (patient['telephone'] != null &&
                                            patient['telephone']
                                                .toString()
                                                .isNotEmpty)
                                          Padding(
                                            padding: const EdgeInsets.only(
                                              top: 4.0,
                                            ),
                                            child: Text(
                                              '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${patient['telephone']}',
                                            ),
                                          ),
                                      ],
                                    ),
                                  ),
                                  if (patient['telephone'] != null &&
                                      patient['telephone']
                                          .toString()
                                          .isNotEmpty)
                                    Positioned(
                                      bottom: 12,
                                      right: 12,
                                      child: ElevatedButton.icon(
                                        style: ElevatedButton.styleFrom(
                                          backgroundColor:
                                              Colors.greenAccent.shade100,
                                          foregroundColor: Colors.black,
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(
                                              20,
                                            ),
                                          ),
                                          elevation: 2,
                                          padding: const EdgeInsets.symmetric(
                                            horizontal: 12,
                                            vertical: 8,
                                          ),
                                        ),
                                        onPressed: () async {
                                          final phone = patient['telephone'];
                                          final uri = Uri.parse('tel:$phone');
                                          if (await canLaunchUrl(uri)) {
                                            await launchUrl(uri);
                                          }
                                        },
                                        icon: Image.asset(
                                          'assets/icons/phone.png',
                                          width: 20,
                                          height: 20,
                                        ),
                                        label: const Text('‡πÇ‡∏ó‡∏£'),
                                      ),
                                    ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder:
                (context) => AppointmentAddDialog(
                  initialDate: _selectedDay, // ‚úÖ ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡πâ‡∏≤
                ),
          ).then((_) {
            if (_selectedDay != null) {
              _fetchAppointmentsForSelectedDay(_selectedDay!);
            }
          });
        },
        backgroundColor: Colors.purple,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
        child: Icon(Icons.add, color: Colors.white, size: 36),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
      bottomNavigationBar: BottomAppBar(
        shape: const CircularNotchedRectangle(),
        notchMargin: 8,
        color: const Color(0xFFFBEAFF),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              IconButton(
                icon: Icon(Icons.calendar_today, size: 30),
                color:
                    _selectedIndex == 0
                        ? Colors.purple
                        : Colors.purple.shade200,
                onPressed: () => _onItemTapped(0),
              ),
              IconButton(
                icon: Icon(Icons.people_alt, size: 30),
                color:
                    _selectedIndex == 1
                        ? Colors.purple
                        : Colors.purple.shade200,
                onPressed: () => _onItemTapped(1),
              ),
              const SizedBox(width: 40),
              IconButton(
                icon: Icon(Icons.bar_chart, size: 30),
                color:
                    _selectedIndex == 3
                        ? Colors.purple
                        : Colors.purple.shade200,
                onPressed: () => _onItemTapped(3),
              ),
              IconButton(
                icon: Icon(Icons.settings, size: 30),
                color:
                    _selectedIndex == 4
                        ? Colors.purple
                        : Colors.purple.shade200,
                onPressed: () => _onItemTapped(4),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
