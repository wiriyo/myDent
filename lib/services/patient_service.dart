// ----------------------------------------------------------------
// üìÅ lib/services/patient_service.dart
// v1.3.0 - ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á HN ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
// ----------------------------------------------------------------
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/patient.dart';
import 'medical_image_service.dart';

class PatientService {
  final CollectionReference _patientsCollection = FirebaseFirestore.instance.collection('patients');
  final MedicalImageService _medicalImageService = MedicalImageService();

  // --- (‡πÄ‡∏°‡∏ò‡∏≠‡∏î fetchPatientsOnce, getPatientById ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  Future<List<Patient>> fetchPatientsOnce() async {
    try {
      final snapshot = await _patientsCollection.orderBy('name').get();
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['docId'] = doc.id;
        return Patient.fromMap(data);
      }).toList();
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ: $e");
      return [];
    }
  }

  Future<Patient?> getPatientById(String patientId) async {
    if (patientId.isEmpty) return null;
    try {
      final doc = await _patientsCollection.doc(patientId).get();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        data['docId'] = doc.id;
        return Patient.fromMap(data);
      }
      return null;
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏î‡πâ‡∏ß‡∏¢ ID: $e");
      return null;
    }
  }

  // --- ‚ú® [UPGRADED v1.3] ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ ---
  Future<void> addPatient(Patient patient) async {
    try {
      // 1. ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á HN ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      final newHnNumber = await _generateNewHN();
      
      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö HN ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
      final patientWithHn = Patient(
        patientId: '', // Firestore ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
        name: patient.name,
        prefix: patient.prefix,
        hnNumber: newHnNumber, // ‚ú® ‡πÉ‡∏ä‡πâ HN ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
        telephone: patient.telephone,
        address: patient.address,
        idCard: patient.idCard,
        birthDate: patient.birthDate,
        medicalHistory: patient.medicalHistory,
        allergy: patient.allergy,
        rating: patient.rating,
        gender: patient.gender,
        age: patient.age,
      );

      // 3. üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
      await _patientsCollection.add(patientWithHn.toMap());
      debugPrint("‚úÖ Added new patient with HN: $newHnNumber");

    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ: $e");
      rethrow;
    }
  }

  // ‚ú® [NEW v1.3] ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á HN ‡πÉ‡∏´‡∏°‡πà
  Future<String> _generateNewHN() async {
    // 1. ‡∏´‡∏≤‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 2567 -> 67)
    final now = DateTime.now();
    final buddhistYear = now.year + 543;
    final yearPrefix = (buddhistYear % 100).toString().padLeft(2, '0');
    final hnPrefix = 'HN-$yearPrefix-';

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ HN ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
    final querySnapshot = await _patientsCollection
        .where('hn_number', isGreaterThanOrEqualTo: hnPrefix)
        .where('hn_number', isLessThan: 'HN-$yearPrefix-z') // ‡πÉ‡∏ä‡πâ 'z' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        .orderBy('hn_number', descending: true)
        .limit(1)
        .get();

    int nextNumber = 1;
    if (querySnapshot.docs.isNotEmpty) {
      // 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ HN ‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ‡∏ô‡∏µ‡πâ, ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ö‡∏ß‡∏Å 1
      final lastHn = querySnapshot.docs.first.get('hn_number') as String;
      final lastNumberStr = lastHn.split('-').last;
      final lastNumber = int.tryParse(lastNumberStr) ?? 0;
      nextNumber = lastNumber + 1;
    }

    // 4. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HN ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô HN-67-0001)
    return '$hnPrefix${nextNumber.toString().padLeft(4, '0')}';
  }

  Future<void> updatePatient(Patient patient) async {
    try {
      await _patientsCollection.doc(patient.patientId).update(patient.toMap());
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ: $e");
      rethrow;
    }
  }

  Future<void> deletePatient(String patientId) async {
    if (patientId.isEmpty) {
      throw ArgumentError("Patient ID cannot be empty.");
    }
    try {
      final patientDocRef = _patientsCollection.doc(patientId);
      await _medicalImageService.deleteAllPatientImages(patientId);
      await _deleteSubcollection(patientDocRef, 'treatments');
      await _deleteSubcollection(patientDocRef, 'medical_images');
      await patientDocRef.delete();
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: $e");
      rethrow;
    }
  }
  
  Future<void> _deleteSubcollection(DocumentReference docRef, String subcollectionName) async {
      final snapshot = await docRef.collection(subcollectionName).get();
      final futures = snapshot.docs.map((doc) => doc.reference.delete()).toList();
      await Future.wait(futures);
  }
}