// ----- FILE: lib/services/treatment_master.dart -----
// ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.1: ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Service ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£
// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î addIfNotExist ‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏î‡πâ

import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/treatment_master.dart';

class TreatmentMasterService {
  static final _collection = FirebaseFirestore.instance.collection(
    'treatment_master',
  );

  static Stream<List<TreatmentMaster>> getAllTreatments() {
    return _collection
        .orderBy('name')
        .snapshots()
        .map(
          (snapshot) =>
              snapshot.docs
                  .map((doc) => TreatmentMaster.fromMap(doc.data(), doc.id))
                  .toList(),
        );
  }

  static Future<void> addTreatment(TreatmentMaster treatment) async {
    await _collection.add(treatment.toMap());
  }

  static Future<void> updateTreatment(TreatmentMaster treatment) async {
    await _collection.doc(treatment.treatmentId).update(treatment.toMap());
  }

  static Future<void> deleteTreatment(String treatmentId) async {
    await _collection.doc(treatmentId).delete();
  }

  // üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  static Future<TreatmentMaster?> getTreatmentByName(String name) async {
    final snapshot =
        await _collection.where('name', isEqualTo: name).limit(1).get();
    if (snapshot.docs.isEmpty) return null;
    final doc = snapshot.docs.first;
    return TreatmentMaster.fromMap(doc.data(), doc.id);
  }

  // üßµ‚ú® [CHANGED v1.1] ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á Master ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
  // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  static Future<String> addIfNotExist(String name, double price) async {
    final snapshot =
        await _collection.where('name', isEqualTo: name).limit(1).get();

    if (snapshot.docs.isEmpty) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      final docRef = await _collection.add({
        'name': name,
        'price': price,
        'duration': 30, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      });
      print('üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ treatment_master: $name ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ ID: ${docRef.id}');
      return docRef.id; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      final docId = snapshot.docs.first.id;
      print('‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô master ‡∏î‡πâ‡∏ß‡∏¢ ID: $docId');
      return docId; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    }
  }
}