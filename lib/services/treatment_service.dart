// v1.4.0 - üóëÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
// v1.3.0 - ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../models/treatment.dart';
import 'medical_image_service.dart';

class TreatmentService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final MedicalImageService _medicalImageService = MedicalImageService();

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á collection 'treatments' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  CollectionReference _getTreatmentsCollection(String patientId) {
    return _firestore.collection('patients').doc(patientId).collection('treatments');
  }

  /// ‚ú® [NEW v1.3.0] ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°
  Future<void> _saveImageUrlToMainGallery(String patientId, String imageUrl) async {
    try {
      await _firestore
          .collection('patients')
          .doc(patientId)
          .collection('medical_images')
          .add({
        'url': imageUrl,
        'createdAt': Timestamp.now(),
      });
      debugPrint("‚úÖ Saved image URL to main gallery.");
    } catch (e) {
      debugPrint("‚ùå Failed to save image URL to main gallery: $e");
    }
  }

  /// ‚ú® [NEW v1.3.0] ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ URL
  Future<void> _deleteImageFromMainGallery(String patientId, String imageUrl) async {
    try {
      final querySnapshot = await _firestore
          .collection('patients')
          .doc(patientId)
          .collection('medical_images')
          .where('url', isEqualTo: imageUrl)
          .limit(1)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        await querySnapshot.docs.first.reference.delete();
        debugPrint("üóëÔ∏è Deleted image record from main gallery.");
      }
    } catch (e) {
      debugPrint("‚ùå Failed to delete image record from main gallery: $e");
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
  Stream<List<Treatment>> getTreatments(String patientId) {
    return _getTreatmentsCollection(patientId)
        .orderBy('date', descending: true)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        return Treatment.fromMap(doc.data() as Map<String, dynamic>, doc.id);
      }).toList();
    });
  }

  /// [UPGRADED v1.3.0] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°
  Future<void> addTreatment(String patientId, Treatment treatment, {List<File>? images}) async {
    try {
      List<String> imageUrls = [];
      if (images != null && images.isNotEmpty) {
        for (var imageFile in images) {
          final imageUrl = await _medicalImageService.uploadImageAndGetUrl(
            file: imageFile,
            patientId: patientId,
          );
          imageUrls.add(imageUrl);
          await _saveImageUrlToMainGallery(patientId, imageUrl);
        }
      }
      final treatmentWithImages = treatment.copyWith(imageUrls: imageUrls);
      final docRef = _getTreatmentsCollection(patientId).doc();
      await docRef.set(treatmentWithImages.copyWith(id: docRef.id).toMap());
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: $e");
      rethrow;
    }
  }

  /// [UPGRADED v1.3.0] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°
  Future<void> updateTreatment(String patientId, Treatment treatment, {List<File>? newImages}) async {
    try {
      List<String> updatedImageUrls = List.from(treatment.imageUrls);
      if (newImages != null && newImages.isNotEmpty) {
        for (var imageFile in newImages) {
          final imageUrl = await _medicalImageService.uploadImageAndGetUrl(
            file: imageFile,
            patientId: patientId,
          );
          updatedImageUrls.add(imageUrl);
          await _saveImageUrlToMainGallery(patientId, imageUrl);
        }
      }
      final updatedTreatment = treatment.copyWith(imageUrls: updatedImageUrls);
      await _getTreatmentsCollection(patientId).doc(treatment.id).update(updatedTreatment.toMap());
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: $e");
      rethrow;
    }
  }

  /// ‚ú® [NEW v1.4.0] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà: Storage, ‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°, ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤
  Future<void> deleteTreatmentImage({
    required String patientId,
    required String treatmentId,
    required String imageUrl,
  }) async {
    try {
      // 1. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Storage
      await _medicalImageService.deleteImageFromUrl(imageUrl);
      
      // 2. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°
      await _deleteImageFromMainGallery(patientId, imageUrl);

      // 3. ‡∏ô‡∏≥ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Array 'imageUrls' ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ treatment
      final docRef = _getTreatmentsCollection(patientId).doc(treatmentId);
      await docRef.update({
        'imageUrls': FieldValue.arrayRemove([imageUrl])
      });

      debugPrint("üóëÔ∏è Completely deleted treatment image: $imageUrl");
    } catch (e) {
      debugPrint("‚ùå Failed to delete treatment image: $e");
      rethrow;
    }
  }

  /// [UPGRADED v1.3.0] ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Storage ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏ß‡∏°
  Future<void> deleteTreatment(String patientId, String treatmentId) async {
    try {
      final docRef = _getTreatmentsCollection(patientId).doc(treatmentId);
      final docSnapshot = await docRef.get();

      if (docSnapshot.exists) {
        final treatmentData = Treatment.fromMap(docSnapshot.data() as Map<String, dynamic>, docSnapshot.id);
        if (treatmentData.imageUrls.isNotEmpty) {
          for (final imageUrl in treatmentData.imageUrls) {
            await _medicalImageService.deleteImageFromUrl(imageUrl);
            await _deleteImageFromMainGallery(patientId, imageUrl);
          }
        }
      }
      await docRef.delete();
    } catch (e) {
      debugPrint("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤: $e");
      rethrow;
    }
  }
}
