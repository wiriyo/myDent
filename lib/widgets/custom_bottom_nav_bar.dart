// v1.1.0 - ‚ú® Smarter Navigation Logic
// üìÅ lib/widgets/custom_bottom_nav_bar.dart

import 'package:flutter/material.dart';
import '../styles/app_theme.dart';
import '../screens/calendar_screen.dart';
import '../screens/patients_screen.dart';
import '../screens/reports_screen.dart';
import '../screens/setting_screen.dart';

class CustomBottomNavBar extends StatelessWidget {
  final int selectedIndex;

  const CustomBottomNavBar({
    super.key,
    required this.selectedIndex,
  });

  @override
  Widget build(BuildContext context) {
    return BottomAppBar(
      shape: const CircularNotchedRectangle(),
      notchMargin: 8.0,
      color: AppTheme.bottomNav,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: <Widget>[
          _buildNavIconButton(context, icon: Icons.calendar_today, tooltip: '‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô', index: 0),
          _buildNavIconButton(context, icon: Icons.people_alt, tooltip: '‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ', index: 1),
          const SizedBox(width: 40), // The space for the FAB
          _buildNavIconButton(context, icon: Icons.bar_chart, tooltip: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', index: 3),
          _buildNavIconButton(context, icon: Icons.settings, tooltip: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', index: 4),
        ],
      ),
    );
  }

  Widget _buildNavIconButton(BuildContext context, {required IconData icon, required String tooltip, required int index}) {
    return IconButton(
      icon: Icon(icon, size: 30),
      color: selectedIndex == index ? AppTheme.primary : AppTheme.primaryLight,
      onPressed: () => _onItemTapped(context, index),
      tooltip: tooltip,
    );
  }

  void _onItemTapped(BuildContext context, int index) {
    // ‚ú® [LOGIC-UPGRADE v1.1] ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô!
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Route ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    final String? currentRouteName = ModalRoute.of(context)?.settings.name;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Route ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
    final Map<int, String> routeMap = {
      0: '/calendar',
      1: '/patients',
      3: '/reports',
      4: '/settings',
    };

    final String targetRoute = routeMap[index] ?? '';

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ /patients ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô patients)
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞
    if (currentRouteName == targetRoute) {
      print('üêû Already on route: $targetRoute. Navigation cancelled.');
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏Å‡πá‡∏à‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞
    Widget page;
    switch (index) {
      case 0:
        page = const CalendarScreen();
        break;
      case 1:
        page = const PatientsScreen();
        break;
      case 3:
        page = const ReportsScreen();
        break;
      case 4:
        page = const SettingsScreen();
        break;
      default:
        return;
    }
    
    Navigator.pushReplacement(
      context,
      PageRouteBuilder(
        pageBuilder: (context, animation1, animation2) => page,
        transitionDuration: Duration.zero,
        reverseTransitionDuration: Duration.zero,
      ),
    );
  }
}
