// v1.3.0 - ‚ú® Added Sequential Month Picker After Year Selection
// üìÅ lib/widgets/custom_date_picker.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:table_calendar/table_calendar.dart';
import '../styles/app_theme.dart';

Future<DateTime?> showBuddhistDatePicker({
  required BuildContext context,
  required DateTime initialDate,
  required DateTime firstDate,
  required DateTime lastDate,
}) {
  return showDialog<DateTime>(
    context: context,
    builder: (BuildContext context) {
      return BuddhistDatePickerDialog(
        initialDate: initialDate,
        firstDate: firstDate,
        lastDate: lastDate,
      );
    },
  );
}

class BuddhistDatePickerDialog extends StatefulWidget {
  final DateTime initialDate;
  final DateTime firstDate;
  final DateTime lastDate;

  const BuddhistDatePickerDialog({
    super.key,
    required this.initialDate,
    required this.firstDate,
    required this.lastDate,
  });

  @override
  State<BuddhistDatePickerDialog> createState() => _BuddhistDatePickerDialogState();
}

class _BuddhistDatePickerDialogState extends State<BuddhistDatePickerDialog> {
  late DateTime _focusedDay;
  late DateTime _selectedDay;

  @override
  void initState() {
    super.initState();
    _focusedDay = widget.initialDate;
    _selectedDay = widget.initialDate;
  }

  // üíñ [SEQUENTIAL-PICKER v1.3.0] ‡πÑ‡∏•‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞
  void _selectYearAndMonth(BuildContext context) async {
    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ---
    final int initialBuddhistYear = _focusedDay.year + 543;
    final int firstBuddhistYear = widget.firstDate.year + 543;
    final int lastBuddhistYear = widget.lastDate.year + 543;
    
    final pickedBuddhistYear = await _showYearPicker(context, initialBuddhistYear, firstBuddhistYear, lastBuddhistYear);

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏Å‡∏î '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏∞
    if (pickedBuddhistYear == null) return;

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ---
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    final pickedMonth = await _showMonthPicker(context, pickedBuddhistYear);

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏∞
    if (pickedMonth == null) return;

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ---
    final gregorianYear = pickedBuddhistYear - 543;
    setState(() {
      _focusedDay = DateTime(
        gregorianYear,
        pickedMonth,
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡πÄ‡∏ä‡πà‡∏ô 29 ‡∏Å.‡∏û. ‡πÉ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ)
        min(_selectedDay.day, DateUtils.getDaysInMonth(gregorianYear, pickedMonth)),
      );
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏ï‡∏Å‡∏•‡∏á" ‡πÄ‡∏•‡∏¢
      _selectedDay = _focusedDay;
    });
  }

  // ‚ú® [YEAR-PICKER-HELPER v1.3.0] ‡πÑ‡∏•‡∏•‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏∞
  Future<int?> _showYearPicker(BuildContext context, int initialBuddhistYear, int firstBuddhistYear, int lastBuddhistYear) {
    final int yearCount = lastBuddhistYear - firstBuddhistYear + 1;
    int initialIndex = initialBuddhistYear - firstBuddhistYear;
    if (initialIndex < 0 || initialIndex >= yearCount) initialIndex = 0;
    
    final scrollController = ScrollController(initialScrollOffset: (initialIndex - 2.5) * 52.0);

    return showDialog<int>(
      context: context,
      builder: (BuildContext dialogContext) {
        return Dialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
          child: SizedBox(
            height: 350,
            width: 300,
            child: Column(
              children: [
                const Padding(
                  padding: EdgeInsets.symmetric(vertical: 20.0),
                  child: Text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ (‡∏û.‡∏®.)', style: TextStyle(fontFamily: AppTheme.fontFamily, fontWeight: FontWeight.bold, fontSize: 18, color: AppTheme.primary)),
                ),
                Expanded(
                  child: GridView.builder(
                    controller: scrollController,
                    padding: const EdgeInsets.all(8),
                    gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3, childAspectRatio: 2.2, mainAxisSpacing: 8, crossAxisSpacing: 8),
                    itemCount: yearCount,
                    itemBuilder: (context, index) {
                      final int year = firstBuddhistYear + index;
                      final bool isSelected = year == initialBuddhistYear;
                      return Material(
                        color: isSelected ? AppTheme.primaryLight.withOpacity(0.6) : Colors.transparent,
                        borderRadius: BorderRadius.circular(30),
                        child: InkWell(
                          onTap: () => Navigator.of(dialogContext).pop(year),
                          borderRadius: BorderRadius.circular(30),
                          child: Center(
                            child: Text(year.toString(), style: TextStyle(fontFamily: AppTheme.fontFamily, fontSize: 16, fontWeight: isSelected ? FontWeight.bold : FontWeight.normal, color: isSelected ? AppTheme.primary : AppTheme.textPrimary)),
                          ),
                        ),
                      );
                    },
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: Padding(
                    padding: const EdgeInsets.only(bottom: 8.0, right: 8.0),
                    child: TextButton(onPressed: () => Navigator.of(dialogContext).pop(), child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(fontFamily: AppTheme.fontFamily, color: AppTheme.textSecondary))),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  // ‚ú® [MONTH-PICKER-HELPER v1.3.0] ‡πÅ‡∏•‡∏∞‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞
  Future<int?> _showMonthPicker(BuildContext context, int selectedBuddhistYear) {
    final List<String> months = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'];
    final int currentMonth = _focusedDay.year == (selectedBuddhistYear - 543) ? _focusedDay.month : -1;

    return showDialog<int>(
      context: context,
      builder: (BuildContext dialogContext) {
        return Dialog(
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
          child: SizedBox(
            height: 450, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö
            width: 300,
            child: Column(
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 20.0),
                  child: Text('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏õ‡∏µ $selectedBuddhistYear', style: const TextStyle(fontFamily: AppTheme.fontFamily, fontWeight: FontWeight.bold, fontSize: 18, color: AppTheme.primary)),
                ),
                Expanded(
                  child: ListView.builder(
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    itemCount: months.length,
                    itemBuilder: (context, index) {
                      final monthName = months[index];
                      final monthNumber = index + 1;
                      final bool isSelected = monthNumber == currentMonth;
                      return ListTile(
                        title: Center(
                          child: Text(monthName, style: TextStyle(fontFamily: AppTheme.fontFamily, fontSize: 16, color: isSelected ? AppTheme.primary : AppTheme.textPrimary, fontWeight: isSelected ? FontWeight.bold : FontWeight.normal)),
                        ),
                        onTap: () => Navigator.of(dialogContext).pop(monthNumber),
                      );
                    },
                  ),
                ),
                Align(
                  alignment: Alignment.centerRight,
                  child: Padding(
                    padding: const EdgeInsets.only(bottom: 8.0, right: 8.0),
                    child: TextButton(onPressed: () => Navigator.of(dialogContext).pop(), child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(fontFamily: AppTheme.fontFamily, color: AppTheme.textSecondary))),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }


  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20.0)),
      child: Container(
        constraints: const BoxConstraints(maxWidth: 400),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TableCalendar(
              locale: 'th_TH',
              focusedDay: _focusedDay,
              selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
              firstDay: widget.firstDate,
              lastDay: widget.lastDate,
              calendarFormat: CalendarFormat.month,
              daysOfWeekHeight: 22.0,
              headerStyle: const HeaderStyle(
                titleCentered: true,
                titleTextStyle: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, fontFamily: AppTheme.fontFamily, color: AppTheme.textPrimary),
                formatButtonVisible: false,
                leftChevronIcon: Icon(Icons.chevron_left, color: AppTheme.primary),
                rightChevronIcon: Icon(Icons.chevron_right, color: AppTheme.primary),
              ),
              calendarStyle: CalendarStyle(
                selectedDecoration: const BoxDecoration(color: AppTheme.primary, shape: BoxShape.circle),
                todayDecoration: BoxDecoration(color: AppTheme.primaryLight.withOpacity(0.5), shape: BoxShape.circle),
                outsideDaysVisible: false,
              ),
              calendarBuilders: CalendarBuilders(
                headerTitleBuilder: (context, date) {
                  final buddhistYear = date.year + 543;
                  final month = DateFormat.MMMM('th_TH').format(date);
                  return InkWell(
                    // üíñ [SEQUENTIAL-PICKER v1.3.0] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡πà‡∏∞
                    onTap: () => _selectYearAndMonth(context),
                    borderRadius: BorderRadius.circular(8),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8.0),
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Flexible(
                            child: Text('$month $buddhistYear', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, fontFamily: AppTheme.fontFamily, color: AppTheme.textPrimary), overflow: TextOverflow.ellipsis, softWrap: false),
                          ),
                          const SizedBox(width: 8),
                          const Icon(Icons.arrow_drop_down, color: AppTheme.textSecondary),
                        ],
                      ),
                    ),
                  );
                },
              ),
              onDaySelected: (selectedDay, focusedDay) {
                setState(() {
                  _selectedDay = selectedDay;
                  _focusedDay = focusedDay;
                });
              },
              onPageChanged: (focusedDay) {
                setState(() {
                  _focusedDay = focusedDay;
                });
              },
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(fontFamily: AppTheme.fontFamily, color: AppTheme.textSecondary)),
                  ),
                  const SizedBox(width: 8),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(backgroundColor: AppTheme.primary, foregroundColor: Colors.white, shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16))),
                    onPressed: () {
                      Navigator.of(context).pop(_selectedDay);
                    },
                    child: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(fontFamily: AppTheme.fontFamily)),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
